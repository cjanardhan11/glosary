if (commandType === "sap command") {
    console.log("entering into script execution by sudo - su....");
    const su_command = `sudo su - ${SID.toLowerCase()}adm -c '${script}'`;
    console.log("entering into script execution by sudo - su....", su_command);

    conn.exec(su_command, (err, stream) => {
        if (err) throw err;
        let output = '';
        let errorOutput = '';

        stream
            .on('close', (code, signal) => {
                console.log(`Stream :: close :: code: ${code}, signal: ${signal}`);
                console.log('error to execute script::: ', errorOutput);
                console.log('output to execute script::: ', output);

                // Dynamically format the output to preserve indentation and make certain parts bold
                const formattedOutput = output
                    // Bold the dynamic key-value pairs (if they follow a "key : value" format)
                    .replace(/([A-Za-z\s]+:\s)([^\n]+)/g, (match, p1, p2) => {
                        // Bold the "key" part (the text before ":") and leave the value normal
                        return p1.replace(p2, `<b>${p2}</b>`);
                    })
                    // Replace newlines with <br> for line breaks
                    .replace(/\n/g, '<br>')
                    // Preserve indentation (Detect lines starting with spaces)
                    .replace(/^(\s+)/g, (match, p1) => {
                        return `&nbsp;`.repeat(p1.length) // Replace leading spaces with `&nbsp;`
                    });

                // Send the formatted HTML response
                const htmlResponse = `
                    <div class="content">
                        <h1>SAP Script Execution Result</h1>
                        <div class="output">
                            <h3>Output:</h3>
                            <pre>${formattedOutput}</pre>
                        </div>
                        <div class="error">
                            <h3>Error Output:</h3>
                            <pre>${errorOutput.replace(/\n/g, '<br>')}</pre>
                        </div>
                    </div>
                `;

                // Send HTML content as the response
                conn.end();
                callback(null, { htmlResponse });
                resolve();
            })
            .on('data', data => {
                output += data.toString();
                console.log('output to execute script::: ', output);
            })
            .stderr.on('data', data => {
                errorOutput += data.toString();
                console.log('Failed execute script::: ', errorOutput);
            });
    });
}



/***************************************
HTML
***************************************/
import React, { useEffect, useState } from 'react';
import axios from 'axios';  // Assuming you're using axios to fetch data

const SapOutputComponent = () => {
  const [htmlContent, setHtmlContent] = useState('');

  useEffect(() => {
    // Function to fetch the HTML content from the API
    const fetchSapOutput = async () => {
      try {
        const response = await axios.get('/api/sap-output');  // Replace with your API endpoint
        setHtmlContent(response.data.htmlResponse);  // Assuming the response contains the HTML content in 'htmlResponse'
      } catch (error) {
        console.error("Error fetching SAP output:", error);
      }
    };

    fetchSapOutput();
  }, []);

  return (
    <div className="sap-output-container">
      <h2>SAP Script Execution Result</h2>
      <div
        className="output"
        dangerouslySetInnerHTML={{ __html: htmlContent }}
      />
    </div>
  );
};




if (commandType === "sap command") {
    console.log("entering into script execution by sudo - su....");
    const su_command = `sudo su - ${SID.toLowerCase()}adm -c '${script}'`;
    console.log("entering into script execution by sudo - su....", su_command);

    conn.exec(su_command, (err, stream) => {
        if (err) throw err;
        let output = '';
        let errorOutput = '';

        stream
            .on('close', (code, signal) => {
                console.log(`Stream :: close :: code: ${code}, signal: ${signal}`);
                console.log('error to execute script::: ', errorOutput);
                console.log('output to execute script::: ', output);

                // Dynamically format the output to preserve indentation and align keys and values
                const formattedOutput = formatOutput(output);
                
                // Send the formatted HTML response
                const htmlResponse = `
                    <div class="content">
                        <h1>SAP Script Execution Result</h1>
                        <div class="output">
                            <h3>Output:</h3>
                            <pre>${formattedOutput}</pre>
                        </div>
                        <div class="error">
                            <h3>Error Output:</h3>
                            <pre>${errorOutput.replace(/\n/g, '<br>')}</pre>
                        </div>
                    </div>
                `;

                // Send HTML content as the response
                conn.end();
                callback(null, { htmlResponse });
                resolve();
            })
            .on('data', data => {
                output += data.toString();
                console.log('output to execute script::: ', output);
            })
            .stderr.on('data', data => {
                errorOutput += data.toString();
                console.log('Failed execute script::: ', errorOutput);
            });
    });

    // Function to format the output
    function formatOutput(output) {
        const lines = output.split('\n');
        
        // Step 1: Find the longest key (the part before the ":")
        let maxKeyLength = 0;
        const keyValuePairs = [];

        // Step 2: Extract key-value pairs
        lines.forEach(line => {
            const match = line.match(/^(\s*)([A-Za-z\s]+)(:\s)([^\n]+)/);
            if (match) {
                const key = match[2];
                const value = match[4];
                maxKeyLength = Math.max(maxKeyLength, key.length);
                keyValuePairs.push({ key, value, indentation: match[1] });
            }
        });

        // Step 3: Align the output
        let formattedOutput = lines.map(line => {
            const match = line.match(/^(\s*)([A-Za-z\s]+)(:\s)([^\n]+)/);
            if (match) {
                const key = match[2];
                const value = match[4];
                const indentation = match[1];

                // Calculate spaces to add to align the ":"
                const spacesToAdd = maxKeyLength - key.length;

                // Construct the formatted line
                const alignedLine = `${indentation}<b>${key}</b>${' '.repeat(spacesToAdd)}: ${value}`;
                return alignedLine;
            }
            return line; // If not a key-value pair, return the line unchanged
        }).join('\n');

        // Return the formatted output
        return formattedOutput.replace(/\n/g, '<br>'); // Convert newlines to <br>
    }
}


export default SapOutputComponent;











#!/bin/bash

# Accept arguments
ID=$1 # SAP Hostname
instance=$2 # SAP Instance

# Define SAP system-related variables
SAP_SYSTEM_STATUS_CMD="sapcontrol -nr 00 -function GetProcessList"  # Modify based on your environment
SAP_STOP_CMD="sapcontrol -nr 00 -function Stop"  # Modify based on your environment
SAP_START_CMD="sapcontrol -nr 00 -function Start"  # Modify based on your environment

# Function to check if the SAP system is up
check_sap_status() {
    # Run the command to check the SAP status
    SAP_STATUS=$( $SAP_SYSTEM_STATUS_CMD )
    
    # Check if the system is running
    RUNNING_COUNT=$(echo "$SAP_STATUS" | grep -o "Running" | wc -l)
    # Check if "Running" appears exactly 4 times
    if [ "$RUNNING_COUNT" -eq 4 ]; then
        return 0  # SAP system is running
    else
        echo "SAP Process Status: Stopped"
        return 1  # SAP system is down
    fi
}

# Function to stop the SAP system
stop_sap_system() {
    echo "Found SAP system is running, initiating SAP stop operation now..."
    echo "Executing Command: sapcontrol -nr 00 -function Stop"
    $SAP_STOP_CMD | grep -vE '^[0-9]{2}\.[0-9]{2}\.[0-9]{4}' | grep -v 'Stop' | grep -v 'OK'
    if [ $? -eq 0 ]; then
        echo "SAP stop operation in progress..."
        wait_for_sap_to_stop
    else
        echo "Failed to stop SAP system."
        exit 1
    fi
}

# Function to wait until SAP system stops
wait_for_sap_to_stop() {
    while true; do
        if ! check_sap_status; then
            echo "SAP stop operation completed..."
            break
        fi
        echo "Checked and found SAP shutdown still in progress, Waiting..."
        sleep 10  # Check every 10 seconds
    done
}

# Function to start the SAP system
start_sap_system() {
    echo "Starting SAP system..."
    $SAP_START_CMD | grep -vE '^[0-9]{2}\.[0-9]{2}\.[0-9]{4}' | grep -v 'Start' | grep -v 'OK'
    if [ $? -eq 0 ]; then
        echo "Validating SAP system status after start."
        wait_for_sap_to_start
    else
        echo "[ERROR] Failed to start SAP system."
        exit 1
    fi
}

# Function to wait until SAP system starts
wait_for_sap_to_start() {
    while true; do
        if check_sap_status; then
            echo "SAP Process Status: Running"
            echo "SAP Stop Execution End Time: $(date)"
            echo "[SUCCESS] SAP system is up and running."
            break
        fi
        echo "Checked and found SAP start still in progress, Waiting..."
        sleep 10  # Check every 10 seconds
    done
}

# Main logic of the script
echo "Checking current SAP system status..."
echo "SAP System Hostname: $ID"  # Use $ID here

# Check if the SAP system is up
if check_sap_status; then
    echo "SAP Process Status: Running"
    stop_sap_system
    sleep 30
    # Check SAP system status again after stop
    echo "Validating SAP system status after stop."
    if check_sap_status; then
        echo "[ERROR] SAP system could not be stopped, please investigate!"
        exit 1
    else
        echo "SAP Process Status: Stopped"
        echo "SAP Stop Execution End Time: $(date)"
        echo "[SUCCESS] SAP system is stopped successfully!"
        # Start the SAP system as it is down
        start_sap_system
    fi
else
    echo "SAP system is down. Starting SAP system..."
    start_sap_system
fi
